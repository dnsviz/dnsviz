#!/usr/bin/env python

import collections
import getopt
import json
import logging
import sys

import dns.name

from dnsviz.analysis import Analyst, DomainNameAnalysis, get_client_addresses, NetworkConnectivityException
import dnsviz.format as fmt

logger = logging.getLogger('dnsviz.analysis')

def usage():
    sys.stderr.write('''Usage: %s [ options ] ( -f <filename> | <domain name> [... ] )

Options:
    -f <filename>  - read names from a file (one name per line), instead of from command line
    -d <level>     - set debug level to a value from 0 to 3, with increasing verbosity (default: 1 or WARNING)
    -r <filename>  - read analysis from a file, instead of querying servers (use "-" for stdin)
    -p             - make json output pretty instead of minimal
    -y             - read in yaml, instead of json
    -Y             - write in yaml, instead of json
    -o <filename>  - write the analysis to file instead of to stdout
''' % sys.argv[0])

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'f:d:r:pyYo:')
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    opts = dict(opts)
    if ('-f' in opts and args) or not ('-f' in opts or args):
        usage()
        sys.exit(1)

    try:
        val = int(opts.get('-d', 1))
    except ValueError:
        usage()
        sys.exit(1)

    if val < 0 or val > 3:
        usage()
        sys.exit(1)

    if val > 2:
        debug_level = logging.DEBUG
    elif val > 1:
        debug_level = logging.INFO
    elif val > 0:
        debug_level = logging.WARNING
    else:
        debug_level = logging.ERROR
    handler = logging.StreamHandler()
    handler.setLevel(debug_level)
    logger.addHandler(handler)
    logger.setLevel(debug_level)

    #TODO: support unicode
    if '-f' in opts:
        names = []
        with open(opts['-f']) as f:
            for line in f:
                names.append(dns.name.from_text(line.strip()))
    else:
        names = map(dns.name.from_text, args)

    name_objs = []
    if '-r' in opts:
        if opts['-r'] == '-':
            analysis_str = sys.stdin.read()
        else:
            analysis_str = open(opts['-r']).read()
        if '-y' in opts:
            import yaml
            analysis_structured = yaml.load(analysis_str)
        else:
            analysis_structured = json.loads(analysis_str)
        for name in names:
            name_objs.append(DomainNameAnalysis.deserialize(name, analysis_structured))
    else:
        client_ipv4, client_ipv6 = get_client_addresses()
        if client_ipv4 is None and client_ipv6 is None:
            raise NetworkConnectivityException('No network interfaces available for analysis!')
        cache = {}
        for name in names:
            a = Analyst(name, client_ipv4=client_ipv4, client_ipv6=client_ipv6, analysis_cache=cache)
            name_objs.append(a.analyze())

    d = collections.OrderedDict()
    for name_obj in name_objs:
        name_obj.serialize(d)

    if '-p' in opts:
        kwargs = { 'indent': 4, 'separators': (',', ': ') }
    else:
        kwargs = {}

    if '-o' not in opts or opts['-o'] == '-':
        fh = sys.stdout
    else:
        fh = open(opts['-o'], 'w')

    if '-Y' in opts:
        import yaml
        fh.write(yaml.dump(d))
    else:
        fh.write(json.dumps(d, **kwargs))

if __name__ == "__main__":
    main()
